// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/flat.go
//
// Generated by this command:
//
//	mockgen -source internal/domain/flat.go -destination tests/mocks/flat_mock.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "avito-test-task/internal/domain"
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockFlatUsecase is a mock of FlatUsecase interface.
type MockFlatUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockFlatUsecaseMockRecorder
}

// MockFlatUsecaseMockRecorder is the mock recorder for MockFlatUsecase.
type MockFlatUsecaseMockRecorder struct {
	mock *MockFlatUsecase
}

// NewMockFlatUsecase creates a new mock instance.
func NewMockFlatUsecase(ctrl *gomock.Controller) *MockFlatUsecase {
	mock := &MockFlatUsecase{ctrl: ctrl}
	mock.recorder = &MockFlatUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlatUsecase) EXPECT() *MockFlatUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFlatUsecase) Create(ctx context.Context, userID uuid.UUID, flatReq *domain.CreateFlatRequest, lg *zap.Logger) (domain.CreateFlatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, flatReq, lg)
	ret0, _ := ret[0].(domain.CreateFlatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFlatUsecaseMockRecorder) Create(ctx, userID, flatReq, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFlatUsecase)(nil).Create), ctx, userID, flatReq, lg)
}

// Update mocks base method.
func (m *MockFlatUsecase) Update(ctx context.Context, moderatorID uuid.UUID, newFlatData *domain.UpdateFlatRequest, lg *zap.Logger) (domain.CreateFlatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, moderatorID, newFlatData, lg)
	ret0, _ := ret[0].(domain.CreateFlatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFlatUsecaseMockRecorder) Update(ctx, moderatorID, newFlatData, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFlatUsecase)(nil).Update), ctx, moderatorID, newFlatData, lg)
}

// MockFlatRepo is a mock of FlatRepo interface.
type MockFlatRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFlatRepoMockRecorder
}

// MockFlatRepoMockRecorder is the mock recorder for MockFlatRepo.
type MockFlatRepoMockRecorder struct {
	mock *MockFlatRepo
}

// NewMockFlatRepo creates a new mock instance.
func NewMockFlatRepo(ctrl *gomock.Controller) *MockFlatRepo {
	mock := &MockFlatRepo{ctrl: ctrl}
	mock.recorder = &MockFlatRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlatRepo) EXPECT() *MockFlatRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFlatRepo) Create(ctx context.Context, flat *domain.Flat, lg *zap.Logger) (domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, flat, lg)
	ret0, _ := ret[0].(domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFlatRepoMockRecorder) Create(ctx, flat, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFlatRepo)(nil).Create), ctx, flat, lg)
}

// DeleteByID mocks base method.
func (m *MockFlatRepo) DeleteByID(ctx context.Context, id, houseID int, lg *zap.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id, houseID, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockFlatRepoMockRecorder) DeleteByID(ctx, id, houseID, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockFlatRepo)(nil).DeleteByID), ctx, id, houseID, lg)
}

// GetAll mocks base method.
func (m *MockFlatRepo) GetAll(ctx context.Context, offset, limit int, lg *zap.Logger) ([]domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, offset, limit, lg)
	ret0, _ := ret[0].([]domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockFlatRepoMockRecorder) GetAll(ctx, offset, limit, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFlatRepo)(nil).GetAll), ctx, offset, limit, lg)
}

// GetByID mocks base method.
func (m *MockFlatRepo) GetByID(ctx context.Context, id, houseID int, lg *zap.Logger) (domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id, houseID, lg)
	ret0, _ := ret[0].(domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockFlatRepoMockRecorder) GetByID(ctx, id, houseID, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockFlatRepo)(nil).GetByID), ctx, id, houseID, lg)
}

// Update mocks base method.
func (m *MockFlatRepo) Update(ctx context.Context, moderatorID uuid.UUID, newFlatData *domain.Flat, lg *zap.Logger) (domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, moderatorID, newFlatData, lg)
	ret0, _ := ret[0].(domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFlatRepoMockRecorder) Update(ctx, moderatorID, newFlatData, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFlatRepo)(nil).Update), ctx, moderatorID, newFlatData, lg)
}
