// Code generated by MockGen. DO NOT EDIT.
// Source: notify.go
//
// Generated by this command:
//
//	mockgen -source=notify.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "avito-test-task/internal/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockNotifySender is a mock of NotifySender interface.
type MockNotifySender struct {
	ctrl     *gomock.Controller
	recorder *MockNotifySenderMockRecorder
}

// MockNotifySenderMockRecorder is the mock recorder for MockNotifySender.
type MockNotifySenderMockRecorder struct {
	mock *MockNotifySender
}

// NewMockNotifySender creates a new mock instance.
func NewMockNotifySender(ctrl *gomock.Controller) *MockNotifySender {
	mock := &MockNotifySender{ctrl: ctrl}
	mock.recorder = &MockNotifySenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifySender) EXPECT() *MockNotifySenderMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockNotifySender) SendEmail(ctx context.Context, recipient, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, recipient, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockNotifySenderMockRecorder) SendEmail(ctx, recipient, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockNotifySender)(nil).SendEmail), ctx, recipient, message)
}

// MockNotifyRepo is a mock of NotifyRepo interface.
type MockNotifyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyRepoMockRecorder
}

// MockNotifyRepoMockRecorder is the mock recorder for MockNotifyRepo.
type MockNotifyRepoMockRecorder struct {
	mock *MockNotifyRepo
}

// NewMockNotifyRepo creates a new mock instance.
func NewMockNotifyRepo(ctrl *gomock.Controller) *MockNotifyRepo {
	mock := &MockNotifyRepo{ctrl: ctrl}
	mock.recorder = &MockNotifyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyRepo) EXPECT() *MockNotifyRepoMockRecorder {
	return m.recorder
}

// GetNoSendNotifies mocks base method.
func (m *MockNotifyRepo) GetNoSendNotifies(ctx context.Context, lg *zap.Logger) ([]domain.Notify, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoSendNotifies", ctx, lg)
	ret0, _ := ret[0].([]domain.Notify)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoSendNotifies indicates an expected call of GetNoSendNotifies.
func (mr *MockNotifyRepoMockRecorder) GetNoSendNotifies(ctx, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoSendNotifies", reflect.TypeOf((*MockNotifyRepo)(nil).GetNoSendNotifies), ctx, lg)
}

// SendNotifyByID mocks base method.
func (m *MockNotifyRepo) SendNotifyByID(ctx context.Context, id int, lg *zap.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotifyByID", ctx, id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotifyByID indicates an expected call of SendNotifyByID.
func (mr *MockNotifyRepoMockRecorder) SendNotifyByID(ctx, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotifyByID", reflect.TypeOf((*MockNotifyRepo)(nil).SendNotifyByID), ctx, id, lg)
}
