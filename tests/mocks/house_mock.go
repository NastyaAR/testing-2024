// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/house.go
//
// Generated by this command:
//
//	mockgen -source internal/domain/house.go -destination tests/mocks/house_mock.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "avito-test-task/internal/domain"
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockHouseUsecase is a mock of HouseUsecase interface.
type MockHouseUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockHouseUsecaseMockRecorder
}

// MockHouseUsecaseMockRecorder is the mock recorder for MockHouseUsecase.
type MockHouseUsecaseMockRecorder struct {
	mock *MockHouseUsecase
}

// NewMockHouseUsecase creates a new mock instance.
func NewMockHouseUsecase(ctrl *gomock.Controller) *MockHouseUsecase {
	mock := &MockHouseUsecase{ctrl: ctrl}
	mock.recorder = &MockHouseUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHouseUsecase) EXPECT() *MockHouseUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHouseUsecase) Create(ctx context.Context, req *domain.CreateHouseRequest, lg *zap.Logger) (domain.CreateHouseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req, lg)
	ret0, _ := ret[0].(domain.CreateHouseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockHouseUsecaseMockRecorder) Create(ctx, req, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHouseUsecase)(nil).Create), ctx, req, lg)
}

// GetFlatsByHouseID mocks base method.
func (m *MockHouseUsecase) GetFlatsByHouseID(ctx context.Context, id int, status string, lg *zap.Logger) (domain.FlatsByHouseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlatsByHouseID", ctx, id, status, lg)
	ret0, _ := ret[0].(domain.FlatsByHouseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlatsByHouseID indicates an expected call of GetFlatsByHouseID.
func (mr *MockHouseUsecaseMockRecorder) GetFlatsByHouseID(ctx, id, status, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlatsByHouseID", reflect.TypeOf((*MockHouseUsecase)(nil).GetFlatsByHouseID), ctx, id, status, lg)
}

// Notifying mocks base method.
func (m *MockHouseUsecase) Notifying(done chan bool, frequency, timeout time.Duration, lg *zap.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notifying", done, frequency, timeout, lg)
}

// Notifying indicates an expected call of Notifying.
func (mr *MockHouseUsecaseMockRecorder) Notifying(done, frequency, timeout, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notifying", reflect.TypeOf((*MockHouseUsecase)(nil).Notifying), done, frequency, timeout, lg)
}

// SubscribeByID mocks base method.
func (m *MockHouseUsecase) SubscribeByID(ctx context.Context, id int, userID uuid.UUID, lg *zap.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeByID", ctx, id, userID, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeByID indicates an expected call of SubscribeByID.
func (mr *MockHouseUsecaseMockRecorder) SubscribeByID(ctx, id, userID, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeByID", reflect.TypeOf((*MockHouseUsecase)(nil).SubscribeByID), ctx, id, userID, lg)
}

// MockHouseRepo is a mock of HouseRepo interface.
type MockHouseRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHouseRepoMockRecorder
}

// MockHouseRepoMockRecorder is the mock recorder for MockHouseRepo.
type MockHouseRepoMockRecorder struct {
	mock *MockHouseRepo
}

// NewMockHouseRepo creates a new mock instance.
func NewMockHouseRepo(ctrl *gomock.Controller) *MockHouseRepo {
	mock := &MockHouseRepo{ctrl: ctrl}
	mock.recorder = &MockHouseRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHouseRepo) EXPECT() *MockHouseRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHouseRepo) Create(ctx context.Context, house *domain.House, lg *zap.Logger) (domain.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, house, lg)
	ret0, _ := ret[0].(domain.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockHouseRepoMockRecorder) Create(ctx, house, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHouseRepo)(nil).Create), ctx, house, lg)
}

// DeleteByID mocks base method.
func (m *MockHouseRepo) DeleteByID(ctx context.Context, id int, lg *zap.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockHouseRepoMockRecorder) DeleteByID(ctx, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockHouseRepo)(nil).DeleteByID), ctx, id, lg)
}

// GetAll mocks base method.
func (m *MockHouseRepo) GetAll(ctx context.Context, offset, limit int, lg *zap.Logger) ([]domain.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, offset, limit, lg)
	ret0, _ := ret[0].([]domain.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockHouseRepoMockRecorder) GetAll(ctx, offset, limit, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockHouseRepo)(nil).GetAll), ctx, offset, limit, lg)
}

// GetByID mocks base method.
func (m *MockHouseRepo) GetByID(ctx context.Context, id int, lg *zap.Logger) (domain.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id, lg)
	ret0, _ := ret[0].(domain.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockHouseRepoMockRecorder) GetByID(ctx, id, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockHouseRepo)(nil).GetByID), ctx, id, lg)
}

// GetFlatsByHouseID mocks base method.
func (m *MockHouseRepo) GetFlatsByHouseID(ctx context.Context, id int, status string, lg *zap.Logger) ([]domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlatsByHouseID", ctx, id, status, lg)
	ret0, _ := ret[0].([]domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlatsByHouseID indicates an expected call of GetFlatsByHouseID.
func (mr *MockHouseRepoMockRecorder) GetFlatsByHouseID(ctx, id, status, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlatsByHouseID", reflect.TypeOf((*MockHouseRepo)(nil).GetFlatsByHouseID), ctx, id, status, lg)
}

// SubscribeByID mocks base method.
func (m *MockHouseRepo) SubscribeByID(ctx context.Context, id int, userID uuid.UUID, lg *zap.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeByID", ctx, id, userID, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeByID indicates an expected call of SubscribeByID.
func (mr *MockHouseRepoMockRecorder) SubscribeByID(ctx, id, userID, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeByID", reflect.TypeOf((*MockHouseRepo)(nil).SubscribeByID), ctx, id, userID, lg)
}

// Update mocks base method.
func (m *MockHouseRepo) Update(ctx context.Context, newHouseData *domain.House, lg *zap.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, newHouseData, lg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockHouseRepoMockRecorder) Update(ctx, newHouseData, lg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHouseRepo)(nil).Update), ctx, newHouseData, lg)
}
