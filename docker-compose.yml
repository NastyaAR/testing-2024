version: "3.9"

services:
  backend1:
    build:
      dockerfile: Dockerfile
      context: .
    image: goback
    container_name: app1
    depends_on:
      - postgres
      - migrate
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TOKEN: ${TOKEN}
      KEY: ${KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
        - dev

  backend2:
    image: goback
    container_name: app2
    depends_on:
      - postgres
      - backend3
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TOKEN: ${TOKEN}
      KEY: ${KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - dev

  backend3:
    image: goback
    container_name: app3
    depends_on:
      - postgres
      - backend1
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TOKEN: ${TOKEN}
      KEY: ${KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - dev
  
  postgres:
    image: postgres:12.19-bullseye
    container_name: postgres-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/postgres.conf:/usr/local/etc/postgres/postgres.conf
      - ./postgres/postgres-data:/var/lib/postgresql/data
      - ./init-postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G
    networks:
        - dev

  postgres-test:
    image: postgres:12.19-bullseye
    container_name: postgres-test-db
    environment:
      POSTGRES_DB: test-db
      POSTGRES_USER: test-user
      POSTGRES_PASSWORD: test-password
      PGDATA: "/var/lib/postgresql/data/pgdata"
    ports:
      - "5431:5432"
    volumes:
      - ./postgres/test-postgres.conf:/usr/local/etc/postgres/postgres.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test-user -d test-db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 512M
    networks:
      - dev

  nginx:
    build:
      dockerfile: NginxDockerfile
      context: ./nginx
    depends_on:
      - backend1
      - backend2
      - backend3
    ports:
      - "80:80"
    restart: always
    networks:
      - dev

  migrate:
    build:
      dockerfile: Dockerfile
      context: ./migrations
    depends_on:
      postgres:
        condition: service_healthy

    volumes:
      - migrations:/migrations
    entrypoint: [ "migrate", "-path", "/migrations", "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable", "up" ]
    networks:
        - dev


  prometheus:
    image: prom/prometheus
    volumes:
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
      - prometheus_data:/prometheus
    ports:
      - 9090:9090
    networks:
      - dev
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
    networks:
      - dev


  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    user:
      root:root
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100
    networks:
      - dev

  
  postgres-exporter:
    container_name: postgres_exporter
    image: prometheuscommunity/postgres-exporter
    depends_on:
      - postgres
    ports:
      - "9187:9187"
    restart: unless-stopped
    networks:
      - dev
    environment:
      DATA_SOURCE_URI: "postgres:5432/postgres?sslmode=disable"
      DATA_SOURCE_USER: ${POSTGRES_USER}
      DATA_SOURCE_PASS: ${POSTGRES_PASSWORD}
      PG_EXPORTER_EXTEND_QUERY_PATH: "/queries/queries.yaml"
    volumes:
       - ./postgres-exporter/:/queries


  mysql_db:
    image: mysql:8
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: test
      MYSQL_USER: example
      MYSQL_PASSWORD: secret2
    volumes:
      - ./dbdata:/var/lib/mysql/
    networks:
      - dev
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G


  mysql-exporter:
    image: prom/mysqld-exporter
    depends_on:
      - mysql_db
    command: 
     - --config.my-cnf=/cfg/.my.cnf
     - --mysqld.address=mysql_db:3306
    volumes:
      - "./.my.cnf:/cfg/.my.cnf"
    ports:
      - 9104:9104
    networks:
      - dev
    entrypoint: ["/bin/mysqld_exporter", "--collect.mysql.user", "--collect.perf_schema.tablelocks", "--collect.perf_schema.eventsstatements", "--collect.perf_schema.memory_events", "--collect.info_schema.tables"]
      

volumes:
  postgres:
  migrations:
  prometheus_data:
  postgres-exporter:
  
networks:
    dev: 
        driver: bridge
